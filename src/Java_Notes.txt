Core Java notes
Q What is Computer
-> A computer is a device or machine that performs processes, calculations and operations
------------------------------------------------------------------------------------------------------------------------
Q What is language
-> language is the medium of the communication
-> every language has set of rules, grammar rules
------------------------------------------------------------------------------------------------------------------------
Q What is programming
-> programming is nothing but set of instructions given to the computer
------------------------------------------------------------------------------------------------------------------------
Q What is binary language [0,1]
-> it is present in 0s and 1s form
-> it is understood by operating system
-> in binary language we write the code in 0s and 1s from but problem is that if we write 0s place 1s and 1s place 0s logic will be change
-> if any error come inside the program then it is difficult to find that because everything in 0s and 1s form
-> for small application we have to write number of lines code

Q what is assembly language
-> in assembly language we write code in english like words which is called mnemonics
        example. ADD NUM1,NUM2
-> but problem is that with this language it not directly understood by operating system because operating system knows only binary language,
   so we need assembler or translator to translate this language into binary language

Q what is high level programming language
-> this language is easy to understand by any developer so it is called HLPL
------------------------------------------------------------------------------------------------------------------------
Q What is software and their types
-> it is a set of instruction to perform specific task
    # Types of software are System software and Application software
    -> System software is designed to run computers hardware and provide a platform to run the applications
            eg. Windows, linux
    -> Application software is designed for end user to perform specific task
            eg. notepad, word
------------------------------------------------------------------------------------------------------------------------
Q Introduction of the java
-> james gosling is father of the java
-> originally java developed by sun micro-system in 1991 and first version release in 1995
-> initial name of the java is OAK
-> there are no abbreviation ( short name) of java
-> slogan of the java is WORA (write once run anywhere)
-> currently java 19 version was release on sep 2022, every march and sep new java version is release
-> currently we are using java 8 and java 11 version in the companies
------------------------------------------------------------------------------------------------------------------------
Q goal behind making java
        or
 why java is the 1st choice of any programmer
-> WORA
-> less execution time
-> less number of instruction
-> less memory consumption
-> less power consumption
------------------------------------------------------------------------------------------------------------------------
Q What is java
-> java is the class based object-oriented high level programming language
        # object-oriented because we can write everything inside the class and object
        # high level programming language because it is easy to understand for java developers
-> by using java we can develop application software like standalone application, web application, enterprise application, mobile application
------------------------------------------------------------------------------------------------------------------------
Q java feature
1) Simple
-> complex syntax which are present inside the c, c++ are removed just like friend function, explicit pointers, operator overloading

2) platform independent
-> In java we can write the code only once then java compiler convert that code in byte code or intermediate code after that jvm take byte code as an input and
   convert it into machine language. JVM is different for every operating system means jvm is platform dependent

-> app.java --> javac --> app.class --> jvm (for windows)--> binary/machine language
                          app.class --> jvm (for mac)--> binary/machine language
                          app.class --> jvm (for linux)--> binary/machine language

    # platform => it is an environment which let you execute the software
        eg. highway => road provide the environment to run the vehicles
        -> platform can be both software (os) and hardware (laptop)

    # platform independency => we can write code only once and run that code on any machine / operating system
    # platform dependency => write code on particular machine and run that code on that particular machine in which we write the code

    Q why c language are platform dependent
    -> in c we write code every time on particular machine and c compiler direct convert that code into machine language
    -> App.c --> c compiler --> binary/machine language (for windows)
       App.c --> c compiler --> binary/machine language (for mac)
       App.c --> c compiler --> binary/machine language (for linux)

3) Secure
-> in java for developer does not have direct memory access it means pointer does not support in java (internally pointer support by jvm)
-> there are some access specifiers are available in java that restrict the direct access in the code
-> security manager packages also available in java that does authentication and authorisation both

4) Robust
-> there is strong exception and error management is done with the help of exception handler
-> Memory management is also handled in efficient way
-> garbage collector is the program which remove the unreferenced or unused memory

5) Object-Oriented
-> in java we can write everything in the term of object and class

6) Multithreaded
-> multi - multiple
    thread - block of code
    multiple block of code run at a same time is called multithreading
-> parallel execution of the code is possible in java

7) high in performance
-> java support multithreading and JIT (just in time compiler) present inside the java
------------------------------------------------------------------------------------------------------------------------
Q Java 8 features
-> functional interface (interface which contain single abstract method)
-> default methods in interface (method created inside the interface with default keyword and which has implementation)
-> static methods in interface
-> lambda expression (it is expression which is used to implement the functional interface)
-> method reference (it is used to replace a single method of the lambda expression)
------------------------------------------------------------------------------------------------------------------------
Q Java 7 features
-> strings in switch statement
-> the try with resources
-> caching multiple exceptions by single catch
-> binary literals (it is a number that is represented in 0s and 1s)
------------------------------------------------------------------------------------------------------------------------
Q Java editions
    # Java SE (java standard edition)
    -> JSE also known as base edition or core java
    -> by using this we can develop desktop/standalone application

    # Java EE (java standard edition)
    -> JEE is also known as advance edition or advance java
    -> it is used to develop web-based, messaging, distributed, and enterprise applications

    # Java ME (java micro edition)
    -> JME is also known as mobile edition or android edition
    -> This edition is used to develop applications for mobile devices, such as cell phones.
    ->It is also used to develop Personnel Digital Assistants, Setup Box, and printers applications.
------------------------------------------------------------------------------------------------------------------------
Q) Types of the java application
-> by using java we can develop or there are three types of application in java standalone application, web application, enterprise application
    # Standalone application =>
    -> standalone application are also called as desktop application
    -> the application which are run on the operating system without internet is called standalone application
    -> We can develop standalone application by using JSE ( java standard edition => core java) + AWT /Swing or Javafx
    -> Example. notepad,word

    # web application =>
    ->  the application which are run at web server by using internet user can access this application is called web application
    ->  we can develop web application by using JEE ( java enterprise edition => advance java)+JDBC /Servlet/JSP/Spring MVC
    ->  Example. fb,youtube,email

     # Enterprise application =>
    ->  The application which are developed for corporate sides by using internet user can access this application is called enterprise application
    ->  we can develop enterprise application by using JSE ( java standard edition => core java)+JEE ( java enterprise edition => advance java)+Spring framework web services
    ->  Example. fb,youtube,email

     # mobile application =>
     -> the application which are run on mobile phones is called mobile application
     -> we can develop mobile application by using JME (java micro edition)
------------------------------------------------------------------------------------------------------------------------
Q what is command prompt
-> it is a software by using this we give the command to operating system to perform specific task

Q what is path
-> it is an exact location where file is present

Q what is java path
-> it is the location of the java executable files

Q why we need java path and when
-> we need java path to tell the operating system where java executable file are present
-> we need java path When we execute the java program by using command prompt

Q how we can set java path
-> go to environment variable
-> then in system variable go inside the path and click on edit
-> then paste the complete path of jdk (C://Program files/ Java / JDK / bin)

Q Can we create an empty java file, compile & execute it?
   1. We can create the empty java file
   2. we can compile the empty java file but no .class file will be generated
   3. since there is no .class generated we cannot run that

Q Can we create an empty class, can we compile & execute it?
   1. We can create empty class
   2. We can compile empty class and .class file will be generated
   3. We cannot run that because main method is required to start the execution

Q Is the main method mandatory for compilation or for execution?
      1. we can compile the java file without main method
      2. but for execution main method is compulsory.

Q Is it mandatory that the java file name & class name should be the same?
      1. **No**
      2. we can have class name and java file name different but the condition is class should not be public

Q When should a Java file name and class name be the same?
      When a class defined as a public then java file name and class name must be same.

Q Why should java file name & public class name be the same?
      because we tell the jvm this is the entry point of the program

Q What is the entry point of java class execution?
      main method

Q In a single java file, how many classes can we define?
      1. We can write any number of classes in a single java file.
      2. But, in a single java file there can be only one public class.
     As a best practices, we should only one class in a single file.

Q If a java file has multiple classes, what is the java file name?
      1. if the java file contains one public class then file name must be same as of that public class.
      2. if the java filed does not contain any public class then java file name can be anything

Q In a single java file, how many public classes can we define?
      Only one

Q If a java source file has multiple classes, how many .class files are generated by the compiler?
      For every class, there will be separate .class file will be generated.

Q Can we compile multiple classes at a time?
      Yes.

Q Can we execute multiple classes at a time?
      No
------------------------------------------------------------------------------------------------------------------------
Q JDK, JRE, JVM
    # JDK [java development kit]
    -> it is used to write java programs by developer
    -> jdk contain java compiler, debugger,some libraries and JRE (JRE contain JVM)

    # JRE [java runtime environment]
    -> it is used to execute the java program not to develop
    -> it is used by client
    -> jdk contain JVM, java APIs [application programming interface] and Class Loader, Bytecode verifier

     # JVM [java virtual machine]
     -> it used to convert byte code into binary language
     -> it contain JIT [just in time],interpreter

**************************** JDK, JRE, JVM ARE PLATFORM DEPENDENT ****************************

Q what is compiler
-> Java compiler is a program that is implemented in C and C++ with the name javac.exe.
   javac is short for java compiler. It is platform-independent.
   It is responsible for the following tasks that are as follows:

   a) Java compiler checks the syntaxial error (Syntax error).
   b) It converts source code into byte code with the help of Java Virtual Machine (JVM).
      Bytecode is just like machine code, but it is not for a specific processor or platform. It cannot be directly executed.
   c) Java compiler also adds the additional code to your program if required.

   Note: C or C++ programs are compiled only once. But when we execute Java programs, every time Java bytecode is translated.
   Therefore, Java programs run a little slower than C/C++ programs.

Q what is interpreter
-> Java interpreter is a program that is implemented in C and C++ with the name java.exe. It is platform-dependent.
   It is responsible for the following tasks. They are as follows:

   a) Java interpreter converts the byte code into the native code line by line.
   b) It executes the program on your system.
------------------------------------------------------------------------------------------------------------------------
Q JVM architecture / program execution
-> we save file with .java extension
-> javac compile the file and convert it into .class file, in .class file byte code are present which is also called intermediate code
-> then it goes inside the JRE
-> JRE contain class loader where are classes are loaded
-> then from class loader it goes inside byte code verifier in which byte code will be checked
-> then it goes inside the JVM
-> in JVM there are different memory component are present just like
        => Heap memory area - instance variable and objects are stored
        => stack memory area - local variable and method execution are stored
        => class or method  area - static variable, class structure and methods are stored
        => native method area - non java code are present
        => native stack method area - non java code are present
        => pc register - next execution stored
-> then it goes inside the execution engine in which JIT and Interpreter are present which converts byte code into machine language/binary code

                                                App.java
                                                    |
                                                App.class
                                                    |
                                                  [JRE]
                                                class loader
                                                    |
                                             byte code verifier
                                                    |
                                                  [JVM]
                   | Heap | Stack | Class or Method | Native method | Native stack method | PC Register |
                                                    |
                                              [Execution engine]
                                             | Interpreter | JIT |
                                                    |
                                                binary code

------------------------------------------------------------------------------------------------------------------------
Q Structure of the java program
    package statement
    import statement
    public class Hello {
        public static void main(String[] args) {
        }
    }

    -> package statement :
        - these are optional.
        - Maximum only one package statement is allowed.
        - package statement must be the first line of the java file
    -> import statement :
        - These are optional.
        - We can have any number of import statements after the package statement and before class declaration
        - To import single class: import java.lang.System;
        - To import multiple classes: import java.lang.*;
        - By default java.lang package is imported.
    -> class definition
        - public : it is a keyword which means class are accessible throughout the application
        - class : it is a keyword which is used to create a class [ Class : it is a pre-defined class]
        - Hello : it is a class name
        - Hello : it is a class name
        - {} : body of the class
        - we write everything inside the class if we try to write outside the class we get CTE
    -> main method
        - It is an entry point for the java application execution.
        - It is called by JVM automatically.
        - public : it is keyword or access specifier which means main method accessible throughout the application
        - static : keyword which access the method without creating an object
        - void : main method does not return anything
        - main : name of the main method
        - (String[] args) : which is accept the input
        - {} : body of the main method
            - System : it is predefined system class
            - out : static reference variable present inside System class of type PrintStream
            - println : predefined method present in PrintStream class which is used to print something on the console.
------------------------------------------------------------------------------------------------------------------------
Q what is keyword
-> keywords means it is a reserved/predefined words in java, so they can not be use as a variable or object or class name
-> there are 53 keyword in java in which 2 keyword can not be used
-> Date types [13]
    - byte, short, int, long, float,
    - double, char, boolean, null, void,
    - true, false, enum
-> file level [2]
    - package, import
-> control statement [11]
    - if, else, switch, continue, break,
    - return, default, case, while, for,
    - do
-> access specifier [18]
    - public, private, protected, static, final,
    - this, super, abstract, interface, class,
    - extends, implements, synchronized, transient, volatile,
    - new, instanceOf, native
-> exception handling [5]
    - try, catch, finally, throw, throws
-> unused [2]
    - goto, const
-> unit [2]
    - assert, strictfp
------------------------------------------------------------------------------------------------------------------------
Q Identifiers
-> it is name given to a class, method, variable, packages
    # Mandatory rules
        1. Allowed set of characters : A-Z, a-z, 0-9, _[underscore], $ if we use any other character apart from this we will get CTE
        2. class name, variable, method, package name must not start with digits
        3. we must not use keywords or predefined symbols as identifier

    # Suggestions or good coding practices
        1. We should not use pre-defined class names as identifiers
            - If we use there won't be any compile time issue and code will run fine
            - If we use then code readability will reduce
        2. class name should follow UpperCamel case
            - In Class name, each word first character should be capital starting from first word

                       class CustomerOrderDetails{

                        }

        3. variable, method, package should follow lowerCamel case
            - In method, variable, package name, each word first character should be capital starting from second word onwards

                        class CustomerOrderDetails{
                        		void getCustomerOrderDetails(){

                        	}
                        }
------------------------------------------------------------------------------------------------------------------------
Q Variable
-> it is a name given to  the memory location address
        int age = 20;
    - int : data type
    - age : variable
    - 20 : value that will be stored in location where age is point
------------------------------------------------------------------------------------------------------------------------
Q Data Types
-> it specifies three things
    - types of data that can hold inside the variable
    - size of the memory requirement
    - range of allowed values
-> there are 2 types of data type
    - primitive data types
        byte    1 byte    : -128 to 127                                     default value is 0
        short   2 bytes   : -32768 to 32767                                 default value is 0
        int     4 byte    : -2147483648 to 2147483647                       default value is 0
        long    8 bytes   : -9223372036854775808 to 9223372036854775807     default value is 0
        float   4 bytes   : 1.4E-45 to 3.4028235E38                         default value is 0.0
        double  8 bytes   : 4.9E-324to 1.7976931348623157E308               default value is 0.0
        char    2 bytes                                                     default value is single space
        boolean 1 bytes                                                     default value is false
    - non primitive data type
        array, tree
-> datatype results
        operand1                                         operation        operand2                                      result
        byte, short, int, char                           +,-, *, /, %     byte, short, int, char                        int
        byte, short, int, char, long                     +,-, *, /, %     byte, short, int, char, long                  long
        byte, short, int, char ,long, float              +,-, *, /, %     byte, short, int, char ,long, float           float
        byte, short, int, char ,long, float, double      +,-, *, /, %     byte, short, int, char ,long, float, double   double
------------------------------------------------------------------------------------------------------------------------
Q Type Casting
-> type casting can be done for primitive as well as non primitive
-> converting from one data type value into another data type value is called type casting
    # Explicit type casting (upcasting, narrowing)
        -> converting bigger data type value into smaller data type value is called explicit type casting
        -> we tell to compiler we are fine with the data loss
        -> developer is responsible for explicit type casting
                int intValue = 100;
                byte byteValue = (byte) intValue;

     # Implicit type casting ( down-casting, widing)
            -> converting smaller data type value into bigger data type value is called implicit type casting
            -> there won't be any data loss
            -> java compiler is responsible for implicit type casting
                 byte byteValue = 100;
                 int intValue = byteValue;

# Autoboxing : converting primitive into non-primitive object
# Unboxing : converting non-primitive object into primitive
------------------------------------------------------------------------------------------------------------------------
Q Operators
-> Arithmetic Operators
       1. +, -, *, /, %
       2. Arithmetic operators are not applicable for boolean data type
       3. These are applicable : byte, short, int, long, float, double, char [ integer ]
       4. if we divide by zero  or take modulo to the number of type [byte, short, int, long, char] we get ArithmeticException divide by zero
                System.out.println(5 / 0);
                System.out.println(5 % 0);
       5. if we divide [float , double ] by zero  to the number of type  we get Infinity
                System.out.println(10.5 / 0);
       6. if we modulo [float , double ] by zero  to the number of type we get NaN[Not a Number]
                 System.out.println(11.6 % 0);
       7. Expression evaluation will be from left to right and will follow BODMAS[ Brackets, Division Multiplication, Addition, subtraction]

-> String concatenation operator
       1. + is the only operator which does two things [+ operator is overloaded in java]
          - mathematical addition
              1. will happen when both the operands left and right are of number type
                   System.out.println(5 + 2); = 7
          - string concatenation
              1. will happen when one of the operand is of type string
                     System.out.println("hello" + 12); = hello12

-> Assignment operator =
       1. It is used to assign the right-hand side value to the left hand side variable.
       2. right side value can be
           - direct value [ int number = 20;]
           - expression [int number = 10 * 30;]
           - variable [int number1 = number2; ]
           - function call [int number = add(); ]
       3. left hand side must be variable [ 10=10; // CTE ]

-> Relational Operators/ Comparison operators
       1. > , <, ≥, ≤, ==, ! =
       2. both the operands should be of same data type
       3. output of relational operators will be of boolean
       4. > , <, ≥, ≤, ==, ! = are applicable on integers
                 System.out.println(true > true); //CTE
       5. == and ! =  are applicable for boolean








